/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package edu.gatech.cs6422;

import java.net.URI;
import java.util.Date;
import java.util.Random;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.filecache.DistributedCache;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.*;
import org.apache.hadoop.mapred.lib.*;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

/* Extracts matching regexs from input files and counts them. */
public class Test_Insect extends Configured implements Tool {
	private Test_Insect() {
	} // singleton

	public int run(String[] args) throws Exception {
//		 if (args.length < 4) {
//		 System.out.println("Usage: bin/hadoop jar test.jar <input_path> <junit4_lib> <junit3_lib> <classpath>");
//		 ToolRunner.printGenericCommandUsage(System.out);
//		 return -1;
//		 }

		JobConf grepJob = new JobConf(getConf(), Test_Insect.class);
		String input_path = "/insect/insect_input/input";
		Path output_path = new Path("/insect/output");
		
		String bcel_lib = "/insect/insect_input/lib/bcel.jar";
	    String class_path = "/insect/insect_input#insect_input";
		DistributedCache.addFileToClassPath(new Path(bcel_lib), grepJob);
		DistributedCache.addCacheFile(new URI(class_path), grepJob);
		DistributedCache.createSymlink(grepJob);
	
		
		try {
		
			grepJob.setJobName("test_instrumentation");
			grepJob.setInputFormat(NLineInputFormat.class);
			NLineInputFormat.setInputPaths(grepJob,
					input_path);

		
			
			grepJob.setMapperClass(InstrumentorMapper.class);

//			grepJob.setReducerClass(TestReducer.class);
			
			FileOutputFormat.setOutputPath(grepJob, output_path);
			grepJob.setOutputKeyClass(Text.class);
			grepJob.setOutputValueClass(Text.class);
			JobClient.runJob(grepJob);
			
		} finally {
			FileSystem.get(grepJob).delete(output_path, true);
		}
		return 0;
	}

	public static void main(String[] args) throws Exception {
		int res = ToolRunner.run(new Configuration(), new Test_Insect(), args);
		System.exit(res);
	}

}
