#!/usr/bin/perl -w
#
# This script automatically generates resource files
#
# Created by  Jim Jones
# Modified by Alex Orso to handle libraries and jar files
#

use strict;
require "pwd.pl";
use Text::ParseWords;
use Getopt::Std;
use File::Basename;
use Socket;
use Sys::Hostname;
use Net::Ping;

$main::msgtext = basename($0);
my $i;
foreach $i ( @ARGV ) {
    $main::msgtext = $main::msgtext . " $i";
}
my $version = "1.2";
$main::comma = -1;
$main::SD=&sys_date;
$main::ST=&sys_time;
$main::host=hostname();
$main::msgtext .= "\n";
$main::msgtext .= "\tinvoked by:\t" . getpwuid($>) . "." . getgrgid($() . "\n";
$main::msgtext .= "\ton host:\t$main::host\n";
$main::msgtext .= "\tat:\t\t$main::ST - $main::SD";
$main::msgtext .= "\n";

&usageError if( $#ARGV == -1 );

our($opt_c, $opt_l, $opt_o, $opt_p, $opt_h);
getopts('c:l:o:p:h') || &usageError();

$opt_h && &usageError();
&usageError if( $#ARGV != -1 );

my $classpath = $opt_c || "$ENV{'PWD'}";
my $libpath = $opt_l || "";
my $rcname = $opt_o || "";
my $progname = $opt_p || "Java Program";
unless( $classpath =~ /^\// ) {
    $classpath = "$ENV{'PWD'}/$classpath";
}

if ( $rcname eq "" ) {
    open OUTFILE, ">&STDOUT";
}
else {
    open OUTFILE, ">$rcname";
}

# output header info
print OUTFILE "#\n";
print OUTFILE "# JABA resource file\n";
print OUTFILE "#\n";
print OUTFILE "# generated by " . basename($0) . " ver. $version\n";
print OUTFILE "# on $main::host at $main::ST - $main::SD\n";
print OUTFILE "#\n";
print OUTFILE "ProgramName = $progname\n";
print OUTFILE "ClassPath = $classpath";
unless( $libpath eq "" ) {
    print OUTFILE ":$libpath";
}
print OUTFILE "\n";
print OUTFILE "ClassFiles = \\\n";

# parse the classpath
my @classpathdirs = split(/:/, "$classpath");
my ($dir, $currdir);

foreach $dir (@classpathdirs) {
    if( -d $dir ) {
	my $currdir=$ENV{'PWD'};
	chdir( $dir );
	&getClassesInDir( ".", "DIR00" );
	chdir( $currdir );
    }
    elsif( ( -f $dir ) && ( $dir =~ /(\.jar)$/ ) ) {
	open( JAR, "jar tf $dir|" );
	while( <JAR> ) {
	    if( /[0-9,A-Z,a-z]+\.class$/ ) {
		print OUTFILE &addClass( "$_" );
	    }
	}
    }
    else {
	die "$dir is neither a directory nor a jar file\n";
    }
}

# output the final newline
print OUTFILE "\n";
close OUTFILE;

&mexit( 0 );

sub usageError {
    print "Usage: " . basename($0) . " [parameters]\n";
    print "\tParameters:\n";
    print "\t -h             : prints this help message\n";
    print "\t -c <classpath> : subject classpath (colon-separated list of\n";
    print "\t                  dirs and jar files; cwd is used by default)\n";
    print "\t -l <libpath>   : library classpath (colon-separated list of\n";
    print "\t                  dirs and jar files)\n";
    print "\t -p <progname>  : program name\n";
    print "\t -o <filename>  : name of the resource file (stdout is used by default)\n";
    &mexit( 1 );
}

sub sys_date {
    my %mn = ('Jan','01', 'Feb','02', 'Mar','03', 'Apr','04',
	      'May','05', 'Jun','06', 'Jul','07', 'Aug','08',
	      'Sep','09', 'Oct','10', 'Nov','11', 'Dec','12' );
    my $sydate=localtime(time);
    my ($day, $month, $num, $time, $year) = split(/\s+/,$sydate);
    my $zl=length($num);
    if ($zl == 1)
    { $num = "0$num";}
    my $yyyymmdd="$year\-$mn{$month}\-$num";
    return $yyyymmdd;
}

sub sys_time {
    my $sydate=localtime(time);
    my($day, $month, $num, $time, $year) = split(/\s+/,$sydate);
    return $time;
}

sub mexit() {
    my( $code ) = @_;
    my $mailresult=&log("ba use", $main::msgtext);
    if ($mailresult ne "1") {
	open( LOG, "/tmp/ba.log.Smain::SD.$main::ST" );
	print LOG "$main::msgtext";
	close LOG;
    }
    else {
	my @logs = </tmp/ba.log.*>;
	for( $i = 0 ; $i <= $#logs ; $i++ ) {
	    $main::msgtext = "";
	    open( LOG, $logs[$i] );
	    while (<LOG>) {
		$main::msgtext .= $_;
	    }
	    close LOG;
	    $mailresult=&log("ba use (log)", $main::msgtext);
	    if ($mailresult eq "1") {
		unlink $logs[$i];
	    }
	}
    }
    exit( $code );
}

sub log  {
    my ($subject, $message) = @_;
    my ($to, $fromaddr, $smtp) = ("orso\@cc.gatech.edu",
				  "orso\@cc.gatech.edu",
				  "127.0.0.1");

    $to =~ s/[ \t]+/, /g; # pack spaces and add comma
    $fromaddr =~ s/.*<([^\s]*?)>/$1/; # get from email address
    $message =~ s/^\./\.\./gm; # handle . as first character
    $message =~ s/\r\n/\n/g; # handle line ending
    $message =~ s/\n/\r\n/g;
    $smtp =~ s/^\s+//g; # remove spaces around $smtp
    $smtp =~ s/\s+$//g;

    if (!$to) {
	return(-8);
    }

    my($proto) = (getprotobyname('tcp'))[2];
    my($port) = (getservbyname('smtp', 'tcp'))[2];
    
    my($smtpaddr) = ($smtp =~
		     /^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/)
	? pack('C4',$1,$2,$3,$4)
	: (gethostbyname($smtp))[4];

    if (!defined($smtpaddr))
    {
	return(-1);
    }

    if (!socket(MAIL, AF_INET, SOCK_STREAM, $proto))
    {
	return(-2);
    }

    if (!connect(MAIL, pack('Sna4x8', AF_INET, $port, $smtpaddr)))
    {
	return(-3);
    }

    my($oldfh) = select(MAIL);
    $| = 1;
    select($oldfh);

    $_ = <MAIL>;
    if (/^[45]/)
    {
	close(MAIL);
	return(-4);
    }

    print MAIL "helo localhost\r\n";
    $_ = <MAIL>;
    if (/^[45]/)
    {
	close(MAIL);
	return(-5);
    }

    print MAIL "mail from: <$fromaddr>\r\n";
    $_ = <MAIL>;
    if (/^[45]/)
    {
	close(MAIL);
	return(-5);
    }

    foreach (split(/, /, $to))
    {
	print MAIL "rcpt to: <$_>\r\n";
	$_ = <MAIL>;
	if (/^[45]/)
	{
	    close(MAIL);
	    return(-6);
	}
    }

    print MAIL "data\r\n";
    $_ = <MAIL>;
    if (/^[45]/)
    {
	close MAIL;
	return(-5);
    }

    print MAIL "To: $to\n";
    print MAIL "From: $fromaddr\n";
    print MAIL "X-Mailer: Perl Powered Socket Mailer\n";
    print MAIL "Subject: $subject\n\n";
    print MAIL "$message";
    print MAIL "\n.\n";
    
    $_ = <MAIL>;
    if (/^[45]/)
    {
	close(MAIL);
	return(-7);
    }
    
    print MAIL "quit\r\n";
    $_ = <MAIL>;

    close(MAIL);
    return(1);
}

sub getClassesInDir {
    my( $dir, $dirhandle ) = @_;
    $dirhandle++;
    my $entry;

    no strict 'refs';
    opendir($dirhandle, "$dir") or
	die "Cannot open directory $ENV{'PWD'}/$dir: $!\n";
    use strict 'refs';
    while( $entry = readdir( $dirhandle ) ) {
	if( ($entry eq '.') || ($entry eq '..') ) {
	    next;
	}
 	if( $entry =~ /\.class$/ ) {
 	    print OUTFILE &addClass( "$dir/$entry" );
 	}
	elsif( -d "$dir/$entry" ) {
	    getClassesInDir( "$dir/$entry", $dirhandle );
	}
	else {
	}
    }
    closedir($dirhandle);
    return;
}

sub addClass {
    my( $class ) = @_;
    
    chomp( $class );
    $main::comma++;
    $class =~ s/^\.\///;
    $class =~ s/\//\./g;
    $class =~ s/\.class$//;
    if( $main::comma > 0 ) {
	$class = ", \\\n" . $class;
    }
    return "$class";
}
